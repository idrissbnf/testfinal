import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from .utils import get_service_name

def show_statistiques(filtered_data):
    """
    Affiche la page des statistiques comparatives entre √©tablissements publics et priv√©s
    """
    st.subheader("üìà Analyses Statistiques Comparatives")
    
    # S√©paration des donn√©es de service
    service_public = filtered_data[filtered_data["Type"] == "Public"]
    service_prive = filtered_data[filtered_data["Type"] == "Priv√©"]
    
    # Cr√©ation des boutons pour la navigation
    st.markdown("### S√©lectionnez une analyse :")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä Statistiques Services", use_container_width=True):
            st.session_state.selected_tab = "tab1"
    
    with col2:
        if st.button("üìà Comparaisons D√©taill√©es", use_container_width=True):
            st.session_state.selected_tab = "tab2"
    
    with col3:
        if st.button("üéØ Analyses Avanc√©es", use_container_width=True):
            st.session_state.selected_tab = "tab3"
    
    # Initialiser la session state si elle n'existe pas
    if "selected_tab" not in st.session_state:
        st.session_state.selected_tab = "tab1"
    
    st.markdown("---")
    
    # Affichage conditionnel bas√© sur le bouton s√©lectionn√©
    if st.session_state.selected_tab == "tab1":
        st.subheader("Statistiques des Services")
        
        # M√©triques services
        cols = st.columns(2)
        
        with cols[0]:
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            with st.expander("üîµ PUBLIC - Statistiques Services", expanded=True):
                if not service_public.empty:
                    # Calculer les m√©triques de service pour les √©tablissements publics
                    st.metric("Nombre d'√©l√®ves", len(service_public))
                    
                    # Calculer le taux de service (pourcentage d'√©l√®ves ayant au moins un service)
                    has_service = service_public['Id_TypeService'].notna().sum()
                    service_rate = has_service/len(service_public)*100 if len(service_public) > 0 else 0
                    st.metric("√âl√®ves avec services", f"{has_service} ({service_rate:.1f}%)")
                    
                    # Nombre moyen de services par √©l√®ve
                    if 'Services' in service_public.columns and 'Nb_Services' in service_public.columns:
                        avg_services = service_public['Nb_Services'].mean()
                        st.metric("Moyenne services/√©l√®ve", f"{avg_services:.2f}")
                    
                    # Taux de r√©ussite pour les √©l√®ves avec services
                    if 'Taux_Reussite' in service_public.columns:
                        with_service = service_public[service_public['Id_TypeService'].notna()]
                        if not with_service.empty and not with_service['Taux_Reussite'].isna().all():
                            reussite_avec_service = with_service['Taux_Reussite'].mean() * 100
                            st.metric("Taux r√©ussite avec services", f"{reussite_avec_service:.1f}%")
                        else:
                            st.metric("Taux r√©ussite avec services", "N/A")
                else:
                    st.info("Aucune donn√©e de service public disponible")
            st.markdown('</div>', unsafe_allow_html=True)
        
        with cols[1]:
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            with st.expander("üî¥ PRIV√â - Statistiques Services", expanded=True):
                if not service_prive.empty:
                    # Calculer les m√©triques de service pour les √©tablissements priv√©s
                    st.metric("Nombre d'√©l√®ves", len(service_prive))
                    
                    # Calculer le taux de service (pourcentage d'√©l√®ves ayant au moins un service)
                    has_service = service_prive['Id_TypeService'].notna().sum()
                    service_rate = has_service/len(service_prive)*100 if len(service_prive) > 0 else 0
                    st.metric("√âl√®ves avec services", f"{has_service} ({service_rate:.1f}%)")
                    
                    # Nombre moyen de services par √©l√®ve
                    if 'Services' in service_prive.columns and 'Nb_Services' in service_prive.columns:
                        avg_services = service_prive['Nb_Services'].mean()
                        st.metric("Moyenne services/√©l√®ve", f"{avg_services:.2f}")
                    
                    # Taux de r√©ussite pour les √©l√®ves avec services
                    if 'Taux_Reussite' in service_prive.columns:
                        with_service = service_prive[service_prive['Id_TypeService'].notna()]
                        if not with_service.empty and not with_service['Taux_Reussite'].isna().all():
                            reussite_avec_service = with_service['Taux_Reussite'].mean() * 100
                            st.metric("Taux r√©ussite avec services", f"{reussite_avec_service:.1f}%")
                        else:
                            st.metric("Taux r√©ussite avec services", "N/A")
                else:
                    st.info("Aucune donn√©e de service priv√© disponible")
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Comparaison des services entre public et priv√©
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.subheader("Comparaison des Services Public vs Priv√©")
        
        # Extraction des identifiants de service uniques
        all_services = []
        for services in filtered_data['Services'].dropna():
            if isinstance(services, list):
                all_services.extend(services)
        unique_services = sorted(set(all_services))
        
        if unique_services:
            # Pr√©paration des donn√©es pour le graphique
            service_comparison = []
            
            for service_id in unique_services:
                # Compter pour le public
                count_public = sum(1 for services in service_public['Services'].dropna() 
                                 if isinstance(services, list) and service_id in services)
                
                # Compter pour le priv√©
                count_prive = sum(1 for services in service_prive['Services'].dropna() 
                                if isinstance(services, list) and service_id in services)
                
                service_comparison.append({
                    'Service ID': service_id,
                    'Nom Service': get_service_name(service_id),
                    'Public': count_public,
                    'Priv√©': count_prive
                })
            
            service_df = pd.DataFrame(service_comparison)
            
            # Melt pour pr√©parer les donn√©es pour le graphique
            service_df_melted = pd.melt(
                service_df, 
                id_vars=['Service ID', 'Nom Service'],
                value_vars=['Public', 'Priv√©'],
                var_name='Type',
                value_name='Count'
            )
            
            # Cr√©er le graphique
            fig = px.bar(
                service_df_melted,
                x='Nom Service',
                y='Count',
                color='Type',
                barmode='group',
                title='Distribution des Services par Type d\'√âtablissement',
                color_discrete_map={'Public': '#1e88e5', 'Priv√©': '#ff5252'},
                labels={'Count': 'Nombre d\'√©l√®ves', 'Nom Service': 'Service'}
            )
            fig.update_layout(
                xaxis_tickangle=-45,
                margin=dict(l=20, r=20, t=40, b=20)
            )
            
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Aucune donn√©e de service disponible pour cette comparaison")
        st.markdown('</div>', unsafe_allow_html=True)
    
    elif st.session_state.selected_tab == "tab2":
        st.subheader("üìà Comparaisons D√©taill√©es")
        
        # Graphiques de comparaison d√©taill√©s
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.subheader("Taux de R√©ussite par Genre")
            
            # Analyse par genre et type d'√©tablissement
            genre_success = filtered_data.groupby(['Type', 'GenreFr'])['Taux_Reussite'].mean().reset_index()
            
            if not genre_success.empty and not genre_success['Taux_Reussite'].isna().all():
                fig = px.bar(
                    genre_success,
                    x='GenreFr',
                    y='Taux_Reussite',
                    color='Type',
                    barmode='group',
                    title='Taux de R√©ussite par Genre et Type d\'√âtablissement',
                    color_discrete_map={'Public': '#1e88e5', 'Priv√©': '#ff5252'},
                    labels={'Taux_Reussite': 'Taux de R√©ussite', 'GenreFr': 'Genre'}
                )
                fig.update_layout(yaxis_tickformat='.0%')
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("Donn√©es insuffisantes pour cette analyse")
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.subheader("R√©partition par Localisation")
            
            # Analyse par localisation
            lieu_repartition = filtered_data.groupby(['Type', 'LL_MIL']).size().reset_index(name='Count')
            
            if not lieu_repartition.empty:
                fig = px.bar(
                    lieu_repartition,
                    x='LL_MIL',
                    y='Count',
                    color='Type',
                    barmode='group',
                    title='R√©partition des √âl√®ves par Localisation',
                    color_discrete_map={'Public': '#1e88e5', 'Priv√©': '#ff5252'},
                    labels={'Count': 'Nombre d\'√©l√®ves', 'LL_MIL': 'Localisation'}
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("Donn√©es insuffisantes pour cette analyse")
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Graphique de corr√©lation services-r√©ussite
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.subheader("Corr√©lation Services et R√©ussite")
        
        if 'Nb_Services' in filtered_data.columns and 'Taux_Reussite' in filtered_data.columns:
            correlation_data = filtered_data[['Nb_Services', 'Taux_Reussite', 'Type']].dropna()
            
            if not correlation_data.empty:
                fig = px.scatter(
                    correlation_data,
                    x='Nb_Services',
                    y='Taux_Reussite',
                    color='Type',
                    title='Corr√©lation entre Nombre de Services et Taux de R√©ussite',
                    color_discrete_map={'Public': '#1e88e5', 'Priv√©': '#ff5252'},
                    labels={
                        'Nb_Services': 'Nombre de Services',
                        'Taux_Reussite': 'Taux de R√©ussite'
                    },
                    trendline="ols"
                )
                fig.update_layout(yaxis_tickformat='.0%')
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("Donn√©es insuffisantes pour l'analyse de corr√©lation")
        else:
            st.info("Colonnes n√©cessaires non disponibles pour l'analyse de corr√©lation")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    elif st.session_state.selected_tab == "tab3":
        st.subheader("üéØ Analyses Avanc√©es")
        
        # Tableau r√©capitulatif
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.subheader("Tableau R√©capitulatif Comparatif")
        
        # Cr√©er un tableau de comparaison
        summary_data = []
        
        for type_etablissement in ['Public', 'Priv√©']:
            data_type = filtered_data[filtered_data['Type'] == type_etablissement]
            
            if not data_type.empty:
                # Calculs des m√©triques
                total_eleves = len(data_type)
                eleves_avec_services = data_type['Id_TypeService'].notna().sum()
                taux_service = (eleves_avec_services / total_eleves * 100) if total_eleves > 0 else 0
                
                # Taux de r√©ussite moyen
                taux_reussite = data_type['Taux_Reussite'].mean() * 100 if 'Taux_Reussite' in data_type.columns else 0
                
                # Nombre moyen de services
                nb_services_moyen = data_type['Nb_Services'].mean() if 'Nb_Services' in data_type.columns else 0
                
                # Taux d'abandon
                taux_abandon = (data_type['SituationFr'].fillna('').str.contains('Abandon').sum() / total_eleves * 100) if total_eleves > 0 else 0
                
                summary_data.append({
                    'Type': type_etablissement,
                    'Total √âl√®ves': total_eleves,
                    '√âl√®ves avec Services': eleves_avec_services,
                    'Taux de Service (%)': f"{taux_service:.1f}%",
                    'Taux de R√©ussite (%)': f"{taux_reussite:.1f}%",
                    'Nb Services Moyen': f"{nb_services_moyen:.2f}",
                    'Taux d\'Abandon (%)': f"{taux_abandon:.1f}%"
                })
        
        if summary_data:
            summary_df = pd.DataFrame(summary_data)
            st.dataframe(summary_df, use_container_width=True)
        else:
            st.info("Aucune donn√©e disponible pour le tableau r√©capitulatif")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Analyse des situations critiques
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.subheader("Situations Critiques")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # √âl√®ves sans services
            sans_service = filtered_data[filtered_data['Id_TypeService'].isna() | (filtered_data['Id_TypeService'] == '')]
            
            if not sans_service.empty:
                sans_service_by_type = sans_service['Type'].value_counts()
                
                fig = px.pie(
                    values=sans_service_by_type.values,
                    names=sans_service_by_type.index,
                    title='√âl√®ves Sans Services par Type',
                    color_discrete_map={'Public': '#1e88e5', 'Priv√©': '#ff5252'}
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("Tous les √©l√®ves ont au moins un service")
        
        with col2:
            # √âl√®ves en situation d'abandon
            abandon = filtered_data[filtered_data['SituationFr'].fillna('').str.contains('Abandon')]
            
            if not abandon.empty:
                abandon_by_type = abandon['Type'].value_counts()
                
                fig = px.pie(
                    values=abandon_by_type.values,
                    names=abandon_by_type.index,
                    title='√âl√®ves en Abandon par Type',
                    color_discrete_map={'Public': '#1e88e5', 'Priv√©': '#ff5252'}
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("Aucun √©l√®ve en situation d'abandon")
        
        st.markdown('</div>', unsafe_allow_html=True)